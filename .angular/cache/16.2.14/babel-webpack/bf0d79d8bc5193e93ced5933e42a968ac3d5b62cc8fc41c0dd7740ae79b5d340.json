{"ast":null,"code":"import { ElementRef } from '@angular/core';\nimport * as Stomp from 'stompjs';\nimport * as SockJS from 'sockjs-client';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\nconst _c0 = [\"MessageArea\"];\nfunction AppComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 11)(1, \"div\", 12)(2, \"h1\", 13);\n    i0.ɵɵtext(3, \"Type your pseudo\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"form\", 14)(5, \"div\", 7)(6, \"input\", 15);\n    i0.ɵɵlistener(\"ngModelChange\", function AppComponent_div_0_Template_input_ngModelChange_6_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.username = $event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"div\", 7)(8, \"button\", 16);\n    i0.ɵɵlistener(\"click\", function AppComponent_div_0_Template_button_click_8_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.connect());\n    });\n    i0.ɵɵtext(9, \"Start Chatting\");\n    i0.ɵɵelementEnd()()()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.username);\n  }\n}\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    constructor() {\n      this.title = 'angularSpringBootWebSocket';\n      this.wsEndPoint = 'http://localhost:8080/ws';\n      this.topic = '/topic/public';\n      this.stompClient = null;\n    }\n    connect() {\n      // set connection flag used to show connection page\n      this.connected = 1;\n      console.log(\"Initializing WebSocket Connection From appComponent\");\n      //establish a connection with the SockJS server.\n      let ws = new SockJS(this.wsEndPoint);\n      //To create a STOMP client  object,call Stomp.over(url) with the URL corresponding to the server’s WebSocket endpoint\n      this.stompClient = Stomp.over(ws);\n      console.log(\"Stomp Client From \" + this.stompClient);\n      //call its connect() method to effectively connect and authenticate to the STOMP server.\n      this.stompClient.connect({}, () => {\n        // Subscribe to the Public Topic\n        this.stompClient.subscribe(this.topic, payload => {\n          console.log(\"Payload received : \\n \" + payload);\n          //JSON.parse() takes a JSON string and transforms it into a JavaScript object\n          var message = JSON.parse(payload.body);\n          console.log(\"\\n Message parsing\" + message);\n          console.log(\"\\n Message type \" + message.type);\n          var messageElement = document.createElement('li');\n          // sender status to show\n          if (message.type === 'JOIN') {\n            messageElement.classList.add('event-message');\n            message.content = message.sender + ' joined!';\n          } else if (message.type === 'LEAVE') {\n            messageElement.classList.add('event-message');\n            message.content = message.sender + ' left!';\n          } else {\n            messageElement.classList.add('chat-message');\n            // sender name icon\n            var avatarElement = document.createElement('i');\n            var avatarText = document.createTextNode(message.sender[0]);\n            avatarElement.appendChild(avatarText);\n            avatarElement.style['background-color'] = this.getAvatarColor(message.sender);\n            messageElement.appendChild(avatarElement);\n            var usernameElement = document.createElement('span');\n            var usernameText = document.createTextNode(message.sender);\n            usernameElement.appendChild(usernameText);\n            messageElement.appendChild(usernameElement);\n          }\n          var textElement = document.createElement('p');\n          var messageText = document.createTextNode(message.content);\n          textElement.appendChild(messageText);\n          messageElement.appendChild(textElement);\n          this.messageArea.nativeElement.appendChild(messageElement);\n          this.messageArea.nativeElement.scrollTop = this.messageArea.nativeElement.scrollHeight;\n        });\n        // Tell your username to the server\n        this.stompClient.send(\"/app/chat.addUser\", {}, JSON.stringify({\n          sender: this.username,\n          type: 'JOIN'\n        }));\n      }, this.onError);\n    }\n    sendMessage() {\n      if (this.messageContent && this.stompClient) {\n        var chatMessage = {\n          sender: this.username,\n          content: this.messageContent,\n          type: 'CHAT'\n        };\n        this.stompClient.send(\"/app/chat.sendMessage\", {}, JSON.stringify(chatMessage));\n      }\n    }\n    onError() {\n      console.log(\"connection error\");\n    }\n    //randomly choose the avatar color\n    getAvatarColor(messageSender) {\n      var colors = ['#2196F3', '#32c787', '#00BCD4', '#ff5652', '#ffc107', '#ff85af', '#FF9800', '#39bbb0'];\n      var hash = 0;\n      for (var i = 0; i < messageSender.length; i++) {\n        hash = 31 * hash + messageSender.charCodeAt(i);\n      }\n      var index = Math.abs(hash % colors.length);\n      return colors[index];\n    }\n    static #_ = this.ɵfac = function AppComponent_Factory(t) {\n      return new (t || AppComponent)();\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AppComponent,\n      selectors: [[\"app-root\"]],\n      viewQuery: function AppComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.messageArea = _t.first);\n        }\n      },\n      decls: 14,\n      vars: 3,\n      consts: [[\"id\", \"username-page\", 4, \"ngIf\"], [\"id\", \"chat-page\", 3, \"hidden\"], [1, \"chat-container\"], [1, \"chat-header\"], [\"name\", \"MessageArea\"], [\"MessageArea\", \"\"], [\"id\", \"messageForm\", \"name\", \"messageForm\"], [1, \"form-group\"], [1, \"input-group\", \"clearfix\"], [\"type\", \"text\", \"name\", \"message\", \"placeholder\", \"Type a message...\", \"autocomplete\", \"off\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\", 1, \"primary\", 3, \"click\"], [\"id\", \"username-page\"], [1, \"username-page-container\"], [1, \"title\"], [\"name\", \"usernameForm\"], [\"type\", \"text\", \"name\", \"name\", \"placeholder\", \"Username\", \"autocomplete\", \"off\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\", 1, \"accent\", \"username-submit\", 3, \"click\"]],\n      template: function AppComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵtemplate(0, AppComponent_div_0_Template, 10, 1, \"div\", 0);\n          i0.ɵɵelementStart(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"h2\");\n          i0.ɵɵtext(5, \"Chat\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelement(6, \"ul\", 4, 5);\n          i0.ɵɵelementStart(8, \"form\", 6)(9, \"div\", 7)(10, \"div\", 8)(11, \"input\", 9);\n          i0.ɵɵlistener(\"ngModelChange\", function AppComponent_Template_input_ngModelChange_11_listener($event) {\n            return ctx.messageContent = $event;\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(12, \"button\", 10);\n          i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_12_listener() {\n            return ctx.sendMessage();\n          });\n          i0.ɵɵtext(13, \"Send\");\n          i0.ɵɵelementEnd()()()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"ngIf\", !ctx.connected);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"hidden\", !ctx.connected);\n          i0.ɵɵadvance(10);\n          i0.ɵɵproperty(\"ngModel\", ctx.messageContent);\n        }\n      },\n      dependencies: [i1.NgIf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.NgModel, i2.NgForm]\n    });\n  }\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}